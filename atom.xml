<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ygytl.github.io/</id>
    <title>Grace</title>
    <updated>2020-05-25T16:00:50.804Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ygytl.github.io/"/>
    <link rel="self" href="https://ygytl.github.io/atom.xml"/>
    <subtitle>Grace&apos;s blog</subtitle>
    <logo>https://ygytl.github.io/images/avatar.png</logo>
    <icon>https://ygytl.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Grace</rights>
    <entry>
        <title type="html"><![CDATA[1045 Favorite Color Stripe (30分)题解]]></title>
        <id>https://ygytl.github.io/post/1045-favorite-color-stripe-30-fen-ti-jie/</id>
        <link href="https://ygytl.github.io/post/1045-favorite-color-stripe-30-fen-ti-jie/">
        </link>
        <updated>2020-05-25T15:39:27.000Z</updated>
        <summary type="html"><![CDATA[<p>1045 Favorite Color Stripe (30分)</p>
<p>Eva is trying to make her own color stripe out of a given one. She would like to keep only her favorite colors in her favorite order by cutting off those unwanted pieces and sewing the remaining parts together to form her favorite color stripe.</p>
<p>It is said that a normal human eye can distinguish about less than 200 different colors, so Eva's favorite colors are limited. However the original</p>
]]></summary>
        <content type="html"><![CDATA[<p>1045 Favorite Color Stripe (30分)</p>
<p>Eva is trying to make her own color stripe out of a given one. She would like to keep only her favorite colors in her favorite order by cutting off those unwanted pieces and sewing the remaining parts together to form her favorite color stripe.</p>
<p>It is said that a normal human eye can distinguish about less than 200 different colors, so Eva's favorite colors are limited. However the original</p>
<!-- more -->
<!-- more -->
<p>stripe could be very long, and Eva would like to have the remaining favorite stripe with the maximum length. So she needs your help to find her the best result.</p>
<p>Note that the solution might not be unique, but you only have to tell her the maximum length. For example, given a stripe of colors {2 2 4 1 5 5 6 3 1 1 5 6}. If Eva's favorite colors are given in her favorite order as {2 3 1 5 6}, then she has 4 possible best solutions {2 2 1 1 1 5 6}, {2 2 1 5 5 5 6}, {2 2 1 5 5 6 6}, and {2 2 3 1 1 5 6}.</p>
<h3 id="input-specification"><strong>Input Specification:</strong></h3>
<p>Each input file contains one test case. For each case, the first line contains a positive integer <strong>N</strong> (≤200) which is the total number of colors involved (and hence the colors are numbered from 1 to <strong>N</strong>). Then the next line starts with a positive integer <strong>M</strong> (≤200) followed by <strong>M</strong> Eva's favorite color numbers given in her favorite order. Finally the third line starts with a positive integer <strong>L</strong> (≤10<sup>4</sup>) which is the length of the given stripe, followed by <strong>L</strong> colors on the stripe. All the numbers in a line a separated by a space.</p>
<h3 id="output-specification"><strong>Output Specification:</strong></h3>
<p>For each test case, simply print in a line the maximum length of Eva's favorite stripe.</p>
<h3 id="sample-input"><strong>Sample Input:</strong></h3>
<pre><code class="language-in">
6

5 2 3 1 5 6

12 2 2 4 1 5 5 6 3 1 1 5 6

</code></pre>
<h3 id="sample-output"><strong>Sample Output:</strong></h3>
<pre><code class="language-out">
7

</code></pre>
<hr>
<p>题目描述：N为颜色求得色号吧(1~N)，给出M个数，表示用户最喜欢的摆放序列，从L个数中自主挑选排序，求出符合用户摆放序列要求的最长序列。</p>
<p>解题思路：动态规划</p>
<p>（1）将M个数用编号存放到数组</p>
<p>（2）从L个数中挑选用户喜欢的颜色序号放入容器</p>
<p>（3）动态规划的思想。。</p>
<hr>
<pre><code class="language-c++">#include&lt;bits/stdc++.h&gt;
using namespace std;
vector&lt;int&gt; v;
map&lt;int,int&gt; G;
const int maxn = 100050;
int dp[maxn];
int main()
{
	int n, m, k;
	int g;
	scanf(&quot;%d %d&quot;, &amp;n, &amp;m);
	for(int i=1; i&lt;=m; i++){
		scanf(&quot;%d&quot;, &amp;g);
		G[g] = i;
	}
	scanf(&quot;%d&quot;, &amp;k);
	for(int i=0; i&lt;k; i++){
		scanf(&quot;%d&quot;, &amp;g);
		if(G[g]!=0){
			v.push_back(G[g]);
		}
	}
	int l = v.size(), ans = 0;
	for(int i=0; i&lt;l; i++){
		dp[i] = 1;
		for(int j=0; j&lt;i; j++){
			if(v[j]&lt;=v[i]&amp;&amp;dp[i]&lt;dp[j]+1){
				dp[i] = dp[j]+1;
			}
		}
		ans = max(ans,dp[i]);
	}
	printf(&quot;%d\n&quot;, ans);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1063 Set Similarity (25分)题解]]></title>
        <id>https://ygytl.github.io/post/1063-set-similarity-25-fen-ti-jie/</id>
        <link href="https://ygytl.github.io/post/1063-set-similarity-25-fen-ti-jie/">
        </link>
        <updated>2020-05-25T01:49:12.000Z</updated>
        <content type="html"><![CDATA[<p>1063 Set Similarity (25分)</p>
<p>Given two sets of integers, the similarity of the sets is defined to be N<sub>c</sub>/N<sub>t</sub>×100%, where N<sub>c</sub> is the number of distinct common numbers shared by the two sets, and N<sub>t</sub> is the total number of distinct numbers in the two sets. Your job is to calculate the similarity of any given pair of sets.</p>
<h3 id="input-specification">Input Specification:</h3>
<p>Each input file contains one test case. Each case first gives a positive integer <em>N</em> (≤50) which is the total number of sets. Then <em>N</em> lines follow, each gives a set with a positive <em>M</em> (≤104) and followed by <em>M</em> integers in the range [0,109]. After the input of sets, a positive integer <em>K</em> (≤2000) is given, followed by <em>K</em> lines of queries. Each query gives a pair of set numbers (the sets are numbered from 1 to <em>N</em>). All the numbers in a line are separated by a space.</p>
<h3 id="output-specification">Output Specification:</h3>
<p>For each query, print in one line the similarity of the sets, in the percentage form accurate up to 1 decimal place.</p>
<h3 id="sample-input">Sample Input:</h3>
<pre><code class="language-in">3
3 99 87 101
4 87 101 5 87
7 99 101 18 5 135 18 99
2
1 2
1 3
</code></pre>
<h3 id="sample-output">Sample Output:</h3>
<pre><code class="language-out">50.0%
33.3%
</code></pre>
<hr>
<p>题目描述：求两个集合中，相同元素在两个集合中占比为多少。</p>
<p>输入数据：给n组集合，每组集合有m个元素，题目给出k组查询，每组询问两集合中相同元素的占比。</p>
<p>分析输入样例</p>
<p>查询1、2集合：相同数2（87 101）/总数4（87 101 99 87 5）=0.5<br>
查询1、3集合：相同数2（99 101）/总数6（99 87 101 18 5 135）=0.3</p>
<p>注意最后一个测试点容易超时，使用set的find()。</p>
<hr>
<pre><code class="language-C++">#include&lt;bits/stdc++.h&gt;
using namespace std;
vector&lt; set&lt;int&gt; &gt; v;
int main()
{
	int n, m, k, g;
	scanf(&quot;%d&quot;, &amp;n);
	v.resize(n+1);
	for(int i=1; i&lt;=n; i++){
		scanf(&quot;%d&quot;, &amp;m);
		for(int j=0; j&lt;m; j++){
			scanf(&quot;%d&quot;, &amp;g);
			v[i].insert(g);
		}
	}
	int count=0, all_num=0, a, b;
	scanf(&quot;%d&quot;, &amp;k);
	set&lt;int&gt;::iterator it;
	for(int i=0; i&lt;k; i++){
		scanf(&quot;%d %d&quot;, &amp;a, &amp;b);
		all_num = v[a].size()+v[b].size();
		count = 0;
		for(it=v[a].begin(); it!=v[a].end(); it++){
			if(v[b].find(*it)!=v[b].end()) count++;//在集合b中可以找到 
		}
		printf(&quot;%.1f%\n&quot;, count*100.0/(all_num-count));//共同的元素出现了两次 
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[windows系统生成ssh key]]></title>
        <id>https://ygytl.github.io/post/windows-xi-tong-sheng-cheng-ssh-key/</id>
        <link href="https://ygytl.github.io/post/windows-xi-tong-sheng-cheng-ssh-key/">
        </link>
        <updated>2020-05-23T17:12:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-首先安装git工具运行git-bash输入指令进入ssh文件夹位置在桌面">1、首先安装Git工具，运行Git Bash，输入指令进入.ssh文件夹(位置在桌面)</h3>
<pre><code>cd ~/.ssh/
</code></pre>
<h3 id="2-如果提示-no-such-file-or-directory你可以手动的创建一个-ssh文件夹即可">2、 如果提示 “ No such file or directory”，你可以手动的创建一个 .ssh文件夹即可</h3>
<pre><code> mkdir ~/.ssh 
</code></pre>
<h3 id="3-配置全局的name和emailgithub的name和email">3、 配置全局的name和email，github的name和email</h3>
<pre><code> git config --global user.name &quot;yourname&quot;  

 git config --global user.email &quot;youremail@outlook.com&quot; 
</code></pre>
<h3 id="4-生成key">4、生成key</h3>
<pre><code> ssh-keygen -t rsa -C &quot;youremail@outlook.com&quot; 
</code></pre>
<p>连续按三次回车，这里设置的密码就为空了，并且创建了key。</p>
<p>最后得到了两个文件：id_rsa和id_rsa.pub</p>
<h3 id="5-打开id_rsapub复制里面的内容添加到你github就行了">5、 打开id_rsa.pub，复制里面的内容添加到你github就行了</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flask Vue.js全栈开发 第一章：创建github库与配置Flask]]></title>
        <id>https://ygytl.github.io/post/flask-vuejs-quan-zhan-kai-fa-di-yi-zhang-chuang-jian-di-yi-ge-flask-restful-api/</id>
        <link href="https://ygytl.github.io/post/flask-vuejs-quan-zhan-kai-fa-di-yi-zhang-chuang-jian-di-yi-ge-flask-restful-api/">
        </link>
        <updated>2020-05-23T17:05:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-1-创建github库">1-1. 创建github库</h2>
<ul>
<li>
<p>添加ssh keys</p>
<p>在Github <code>Settings</code>中找到<code>SSH and GPG keys</code>，单击<code>New SSH key</code>，复制公钥文件<code>id_rsa.pub</code>中的内容</p>
</li>
<li>
<p>测试ssh连接</p>
<p>在<code>Git Bash</code>中执行</p>
<pre><code>$ ssh -T git@github.com
</code></pre>
<p><code>Hi username! You've successfully authenticated, but GitHub does not provide shell access.</code>表示连接成功。</p>
</li>
</ul>
<h3 id="1-2-git-clone">1-2. git clone</h3>
<pre><code>cd /G/Python/flask/
git clone https://github.com/YGYtl/flask-vuejs-Graceblog.git
</code></pre>
<h3 id="1-3-分支管理">1-3. 分支管理</h3>
<pre><code>git checkout -b dev  //创建dev分支
git branch  //查看分支
</code></pre>
<h2 id="2-1-配置-flask">2-1. 配置 Flask</h2>
<ul>
<li>
<p>装python3</p>
</li>
<li>
<p>使用<code>命令窗口</code>，在文件夹<code>flask-vuejs-Graceblog</code>中创建目录back-end(文件夹)，这是<code>后端API应用</code>所在的位置</p>
</li>
<li>
<p>在back-end文件夹中，直接建立虚拟环境文件夹，同时生成虚拟环境 ，接着安装flask。</p>
<pre><code class="language-cmd">G:\flask-vuejs-Graceblog\back-end&gt;python -m venv venv  //建立虚拟环境文件夹，同时生成虚拟环境
G:\flask-vuejs-Graceblog\back-end&gt;venv\Scripts\activate  //通过\venv\Scripts\activate命令进入虚拟环境
(venv) G:\flask-vuejs-Graceblog\back-end&gt;pip install flask  //安装flask
(venv) G:\flask-vuejs-Graceblog\back-end&gt;pip freeze &gt; requirements.txt  //迁移模块
(venv) G:\flask-vuejs-Graceblog\back-end&gt;pip install python-dotenv  //加载读取环境变量信息的包
(venv) G:\flask-vuejs-Graceblog\back-end&gt;pip freeze &gt; requirements.txt  //迁移模块
</code></pre>
</li>
<li>
<p>在back-end文件夹中创建.gitignore文件：</p>
<pre><code>.idea/
__pycache__/
venv/
.env
app.db
yourblog.log*
</code></pre>
</li>
</ul>
<h3 id="2-2-应用工厂">2-2. 应用工厂</h3>
<ul>
<li>
<p>先在back-end文件夹下创建app文件夹，之后在app文件夹下创建__init__.py，创建Flask应用，代码如下：</p>
<pre><code class="language-python">from flask import Flask
from config import Config
def create_app(config_class=Config):
    app = Flask(__name__)
    app.config.from_object(config_class)
    
    #注册blueprint
    from app.api import bp as api_bp
    app.register_blueprint(api_bp, url_prefix='/api')
    return app
</code></pre>
</li>
</ul>
<h3 id="2-3-api蓝图">2-3. API蓝图</h3>
<ul>
<li>在app文件夹下创建api文件夹，新建__init__.py</li>
</ul>
<pre><code class="language-python">from flask import Blueprint
bp = Blueprint('api', __name__)
# 写在最后防止循环导入，ping.py文件也会导入 bp
from app.api import ping
</code></pre>
<ul>
<li>定义路由函数，在api文件夹下新建ping.py(客户端请求访问/ping时，响应并返回Pong!)</li>
</ul>
<pre><code class="language-python"> from flask import jsonify
 from app.api import bp
 @bp.route('/ping', methods=['GET'])
 def ping():
     '''前端Vue.js用来测试与后端Flask API的连通性'''
     return jsonify('Pong!')
</code></pre>
<h3 id="2-4-应用启动文件">2-4. 应用启动文件</h3>
<p>在back-end文件夹下新建Graceblog.py</p>
<pre><code class="language-python">from app import create_app
app = create_app()
</code></pre>
<h3 id="2-5-配置文件">2-5. 配置文件</h3>
<ul>
<li>
<p>在back-end文件夹下新建config.py</p>
<pre><code class="language-python">import os
from dotenv import load_dotenv
basedir = os.path.abspath(os.path.dirname(__file__))
load_dotenv(os.path.join(basedir, '.env'), encoding='utf-8')
class Config(object):
    pass
</code></pre>
</li>
<li>
<p>在back-end文件夹下新建.env</p>
<pre><code>FLASK_APP=Graceblog.py
FLASK_DEBUG=1
</code></pre>
</li>
</ul>
<h3 id="2-6-启动应用">2-6. 启动应用</h3>
<pre><code>(venv) G:\flask-vuejs-Graceblog\back-end&gt;flask run

尝试访问http://127.0.0.1:5000/api/ping
</code></pre>
<h3 id="2-7-git的一些操作">2-7. git的一些操作</h3>
<pre><code>git checkout -b dev  //新建dev分支

git checkout dev  //切换到dev分支上

git branch  //查看在那个分支


提交代码
git add .  //添加所有文件
git commit -m 'soso'  //定义soso
git checkout master  //切换到master主分支上
git merge dev  //将dev分支融入master
git checkout -d dev  //删除dev分支
git push -u origin master  //将本地master分支代码上传到github的master分支


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown常用快捷键]]></title>
        <id>https://ygytl.github.io/post/markdown-chang-yong-kuai-jie-jian/</id>
        <link href="https://ygytl.github.io/post/markdown-chang-yong-kuai-jie-jian/">
        </link>
        <updated>2020-05-23T16:37:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="常用快捷键">常用快捷键：</h2>
<h4 id="插入代码~键3次-也就是三个">插入代码：(~键3次---也就是三个'`')</h4>
<pre><code>Ctrl + Shift + C
</code></pre>
<h4 id="插入链接">插入链接</h4>
<pre><code>Ctrl + K
</code></pre>
<h4 id="行内代码">行内代码</h4>
<pre><code>Ctrl + Shift + K
</code></pre>
<h4 id="无序列表">无序列表</h4>
<pre><code>Ctrl + Shift + L
</code></pre>
<h4 id="插入图片">插入图片</h4>
<pre><code>Ctrl + Shift + I
</code></pre>
<h4 id="撤销">撤销</h4>
<pre><code>Ctrl + Z
</code></pre>
<h4 id="n阶标题">n阶标题</h4>
<pre><code>Ctrl + N
</code></pre>
<h4 id="返回typora顶部">返回Typora顶部</h4>
<pre><code>Ctrl + Home
</code></pre>
<h4 id="返回typora底部">返回Typora底部</h4>
<pre><code>Ctrl + End
</code></pre>
<h4 id="创建表格">创建表格</h4>
<pre><code>Ctrl + T
</code></pre>
<h4 id="创建超链接">创建超链接</h4>
<pre><code>Ctrl + K
</code></pre>
<h4 id="搜索">搜索</h4>
<pre><code>Ctrl + F
</code></pre>
<h4 id="选中某句话">选中某句话</h4>
<pre><code>Ctrl + L
</code></pre>
<h4 id="选中某个单词">选中某个单词</h4>
<pre><code>Ctrl + D
</code></pre>
<h4 id="选中相同格式的文字">选中相同格式的文字</h4>
<pre><code>Ctrl + E
</code></pre>
<h4 id="搜索并替换">搜索并替换</h4>
<pre><code>Ctrl + H
</code></pre>
<h4 id="删除线">删除线</h4>
<pre><code>Alt + Shift + 5
</code></pre>
<h4 id="插入图片-2">插入图片</h4>
<pre><code>Ctrl + Shift + I
</code></pre>
<h4 id="公式块">公式块</h4>
<pre><code>Ctrl + Shift + M
</code></pre>
<h4 id="引用">引用</h4>
<pre><code>Ctrl + Shift + Q
</code></pre>
<h2 id="块元素">块元素：</h2>
<h4 id="转义字符">转义字符'/'</h4>
<pre><code>\   反斜线
`   反引号
*   星号
_   下划线
{}  花括号
[]  方括号
()  小括号
#   井字号
+   加号
-   减号
.   英文句点
!   感叹号
</code></pre>
<h4 id="标题级别">标题级别：#.......</h4>
<h4 id="引用文字-空格-引用文字">引用文字：&gt; + 空格 + 引用文字</h4>
<h4 id="无序列表使用-都可以后面要加个空格哦">无序列表：使用‘*‘、’+‘、’-’ 都可以(后面要加个空格哦)</h4>
<h4 id="有序列表1-2等等后面加个空格就行">有序列表：‘1.’、'2.'等等，后面加个空格就行</h4>
<h4 id="任务列表">任务列表</h4>
<pre><code>\-[]不勾选
\-[x]勾选
</code></pre>
<h4 id="插入表格弹出表格设置">插入表格(弹出表格设置)</h4>
<h4 id="分割线或-按回车即得分割线">分割线：***或---按回车即得分割线</h4>
<h4 id="设置目录">设置目录</h4>
<pre><code>[toc]回车即可
</code></pre>
<h4 id="内部链接">内部链接</h4>
<pre><code>[链接](http://example.com/ &quot;标题&quot;)
[链接](http://example.net/)
</code></pre>
<h4 id="图片">图片</h4>
<pre><code>![显示文字](C:\images\cat.png &quot;图片标题&quot;)
![显示文字](C:\images\cat.png)
还可以直接拖入
</code></pre>
<h4 id="斜体">斜体</h4>
<pre><code>*单个星号*  或者  _单个下划线_
</code></pre>
<h4 id="加粗">加粗</h4>
<pre><code>**两个星号** 或者  __两个下划线__
</code></pre>
<h4 id="删除线-2">删除线</h4>
<pre><code>~~删除线~~
</code></pre>
<h4 id="下划线">下划线</h4>
<pre><code>&lt;u&gt;下划线内容&lt;/u&gt; 或者 Ctrl + U
</code></pre>
<h4 id="表情符号">表情符号</h4>
<pre><code>:smile
</code></pre>
<h4 id="下标">下标</h4>
<pre><code>&lt;sub&gt;内容&lt;/sub&gt;
H&lt;sub&gt;2&lt;/sub&gt;O
</code></pre>
<h4 id="上标">上标</h4>
<pre><code>&lt;sup&gt;内容&lt;/sup&gt;
X&lt;sup&gt;2&lt;/sup&gt;
</code></pre>
<h4 id="高亮">高亮</h4>
<pre><code>==高亮==
</code></pre>
<h4 id="文本居中">文本居中</h4>
<pre><code>&lt;center&gt;重要的内容哦&lt;/center&gt;
</code></pre>
<h4 id="换行符">换行符</h4>
<pre><code>&lt;/br&gt; 或 空格+空格+Enter
</code></pre>
<h3 id="参考链接"><a href="https://www.cnblogs.com/hider/p/11614688.html">参考链接</a></h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://ygytl.github.io/post/hello-gridea/</id>
        <link href="https://ygytl.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>