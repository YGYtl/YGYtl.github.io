<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ygytl.github.io/</id>
    <title>Grace</title>
    <updated>2020-11-28T19:21:20.079Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ygytl.github.io/"/>
    <link rel="self" href="https://ygytl.github.io/atom.xml"/>
    <subtitle>Grace&apos;s blog</subtitle>
    <logo>https://ygytl.github.io/images/avatar.png</logo>
    <icon>https://ygytl.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Grace</rights>
    <entry>
        <title type="html"><![CDATA[Mybatis]]></title>
        <id>https://ygytl.github.io/post/mybatis/</id>
        <link href="https://ygytl.github.io/post/mybatis/">
        </link>
        <updated>2020-11-28T18:28:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="mybatis框架一个框架早期叫做ibatis-mybatis-sql-mapper-framework-for-javasql-映射框架">mybatis框架：一个框架，早期叫做ibatis。MyBatis SQL Mapper Framework for Java（sql 映射框架）</h3>
<ol>
<li>sql mapper：sql映射<br>
    可以把数据库表中的一行数据  映射为 一个java对象<br>
    （一行数据可以看作是一个java对象。操作这个对象，就相当于操作表中的数据）</li>
<li>data Access Objects(DAOs)：数据访问，对数据库执行增删改查<br>
<img src="https://ygytl.github.io//post-images/1606588816653.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PAT（甲级）2019年冬仿真卷 7-4 Cartesian Tree (30分)题解]]></title>
        <id>https://ygytl.github.io/post/7-4-cartesian-tree-30-fen-ti-jie/</id>
        <link href="https://ygytl.github.io/post/7-4-cartesian-tree-30-fen-ti-jie/">
        </link>
        <updated>2020-07-20T14:13:45.000Z</updated>
        <content type="html"><![CDATA[<p>7-4 Cartesian Tree (30分)</p>
<p>A <strong>Cartesian tree</strong> is a binary tree constructed from a sequence of distinct numbers. The tree is heap-ordered, and an inorder traversal returns the original sequence. For example, given the sequence { 8, 15, 3, 4, 1, 5, 12, 10, 18, 6 }, the min-heap Cartesian tree is shown by the figure.</p>
<figure data-type="image" tabindex="1"><img src="https://images.ptausercontent.com/6a99f68a-6578-46e0-9232-fbf0adf3691f.jpg" alt="CTree.jpg" loading="lazy"></figure>
<p>Your job is to output the level-order traversal sequence of the min-heap Cartesian tree.</p>
<h3 id="input-specification">Input Specification:</h3>
<p>Each input file contains one test case. Each case starts from giving a positive integer <em>N</em> (≤30), and then <em>N</em> distinct numbers in the next line, separated by a space. All the numbers are in the range of <strong>int</strong>.</p>
<h3 id="output-specification">Output Specification:</h3>
<p>For each test case, print in a line the level-order traversal sequence of the min-heap Cartesian tree. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the beginning or the end of the line.</p>
<h3 id="sample-input">Sample Input:</h3>
<pre><code class="language-in">10
8 15 3 4 1 5 12 10 18 6
</code></pre>
<h3 id="sample-output">Sample Output:</h3>
<pre><code class="language-out">1 3 5 8 4 6 15 10 12 18
</code></pre>
<hr>
<p>题目描述： <strong>Cartesian</strong> Tree，特意去百度了一下是啥，不懂是啥树，也不影响做题。中文叫笛卡尔树。题目给出这样一棵树的中序遍历，需要你输出他的层序遍历。</p>
<p>看图就能够发现他的构造特点了，就是根结点比左右子结点的值都小。</p>
<p>输入：第一行n表示树中结点的个数，第二行是树的中序遍历结果。</p>
<p>输出：输出该树层序遍历的结果。</p>
</br>
<p>解题思路：我写了两种解法，都是通过递归实现，但处理细节有所不同。解法二有些题是会报错的，有点小bug。bug是啥自己分析哈。这里详细解说解法一；首先不需要建树，用vector放中序遍历的值，通过递归可获得树的先序、中序、后序遍历。递归的思想是，每次找到索引l-索引r之间的最小值，该值便是根节点的值啦，然后稍稍修改区间范围即可。再有一个就是用结构体存放每个结点的值及其所在的层序遍历位置，通过sort排序就能简单便捷的得到层序遍历结果了，如果不适用结构体，直接用unorder_map或map或数组存放，会内存超限的！这是测试点2的坑点。</p>
<hr>
<pre><code class="language-c++">//解法一：
#include&lt;bits/stdc++.h&gt;
using namespace std;
const int inf = 0x3f3f3f3f;
int n;
vector&lt;int&gt; in;
struct node{
	int index;
	int num;
};
vector&lt;node&gt; level;
bool cmp(node a, node b){
	return a.index &lt; b.index;
}
void dfs(int l, int r, int index){
	if(l&gt;=r) return ;
	int k = 0, mx = inf;
	for(int i=l; i&lt;r; i++){
		if(in[i]&lt;mx){
			mx = in[i];
			k = i;
		}
	}
	node t;
	t.index = index;
	t.num = in[k];
	level.push_back(t);
	dfs(l,k,index*2);
	dfs(k+1,r,index*2+1);
}

int main()
{
	node t;
	scanf(&quot;%d&quot;, &amp;n);
	in.resize(n);
	for(int i=0; i&lt;n; i++) scanf(&quot;%d&quot;, &amp;in[i]);
	dfs(0,n,1);
	sort(level.begin(),level.end(),cmp);
	for(int i=0; i&lt;level.size(); i++){
		t = level[i];
		if(i) printf(&quot; &quot;);
		printf(&quot;%d&quot;, t.num);
	}
	return 0;
}

</code></pre>
</br>
<pre><code class="language-c++">//解法二：
#include&lt;bits/stdc++.h&gt;
using namespace std;
#define ll long long
int n;
vector&lt;int&gt; in, v;
struct node{
	int index;
	int num;
};
vector&lt;node&gt; level;
unordered_map&lt;int,int&gt; p;
bool cmp(node a, node b){
	return a.index &lt; b.index;
}
void dfs(int l, int r, int index){
	node t;
	if(l&gt;=r) return ;
	v = in;
	sort(v.begin()+l,v.begin()+r);
	int k = p[v[l]];
	t.index = index;
	t.num = v[l];
	level.push_back(t);
	dfs(l,k,index*2);
	dfs(k+1,r,index*2+1);
}
int main()
{
	node t;
	scanf(&quot;%d&quot;, &amp;n);
	in.resize(n);
	for(int i=0; i&lt;n; i++){
		scanf(&quot;%d&quot;, &amp;in[i]);
		p[in[i]] = i;
	}
	dfs(0,n,1);
	sort(level.begin(),level.end(),cmp);
	for(int i=0; i&lt;level.size(); i++){
		t = level[i];
		if(i) printf(&quot; &quot;);
		printf(&quot;%d&quot;, t.num);
	}
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PAT（甲级）2019年冬仿真卷 7-3 Summit (25分)题解]]></title>
        <id>https://ygytl.github.io/post/7-3-summit-25-fen-ti-jie/</id>
        <link href="https://ygytl.github.io/post/7-3-summit-25-fen-ti-jie/">
        </link>
        <updated>2020-07-20T13:59:18.000Z</updated>
        <content type="html"><![CDATA[<p>7-3 Summit (25分)</p>
<p>A <strong>summit</strong> (峰会) is a meeting of heads of state or government. Arranging the rest areas for the summit is not a simple job. The ideal arrangement of one area is to invite those heads so that everyone is a direct friend of everyone.</p>
<p>Now given a set of tentative arrangements, your job is to tell the organizers whether or not each area is all set.</p>
<h3 id="input-specification">Input Specification:</h3>
<p>Each input file contains one test case. For each case, the first line gives two positive integers N (≤ 200), the number of heads in the summit, and M, the number of friendship relations. Then M lines follow, each gives a pair of indices of the heads who are friends to each other. The heads are indexed from 1 to N.</p>
<p>Then there is another positive integer K (≤ 100), and K lines of tentative arrangement of rest areas follow, each first gives a positive number L (≤ N), then followed by a sequence of L distinct indices of the heads. All the numbers in a line are separated by a space.</p>
<h3 id="output-specification">Output Specification:</h3>
<p>For each of the K areas, print in a line your advice in the following format:</p>
<ul>
<li>if in this area everyone is a direct friend of everyone, and no friend is missing (that is, no one else is a direct friend of everyone in this area), print <code>Area X is OK.</code>.</li>
<li>if in this area everyone is a direct friend of everyone, yet there are some other heads who may also be invited without breaking the ideal arrangement, print <code>Area X may invite more people, such as H.</code> where <code>H</code> is the smallest index of the head who may be invited.</li>
<li>if in this area the arrangement is not an ideal one, then print <code>Area X needs help.</code> so the host can provide some special service to help the heads get to know each other.</li>
</ul>
<p>Here <code>X</code> is the index of an area, starting from 1 to <code>K</code>.</p>
<h3 id="sample-input">Sample Input:</h3>
<pre><code class="language-in">8 10
5 6
7 8
6 4
3 6
4 5
2 3
8 2
2 7
5 3
3 4
6
4 5 4 3 6
3 2 8 7
2 2 3
1 1
2 4 6
3 3 2 1
</code></pre>
<h3 id="sample-output">Sample Output:</h3>
<pre><code class="language-out">Area 1 is OK.
Area 2 is OK.
Area 3 is OK.
Area 4 is OK.
Area 5 may invite more people, such as 3.
Area 6 needs help.
</code></pre>
<hr>
<p>题目描述：安排峰会的休息地是一个不简单的活，每个安排的休息地中，需要所有的人都彼此认识。</p>
<p>输入：第一行n，m分别表示有n个人参加峰会，m对好友关系。接下来m行，分别表示这两个人是好友关系。</p>
<p>接下来有一个k值，表示需要查询的休息地个数。往下的k行，第一个值表示该休息地有L个人，接着同一行有L个数。</p>
<p>输出：</p>
<p>1)如果查询的休息地中，有任意两个人不是相互认识的，则输出格式为Area X needs help.，其中X表示第几次查询的编号；</p>
<p>2)如果查询的休息地中，任意两个人都相互认识，并且能够再找出一个人，这人加入进来后，彼此仍旧相互认识，则输出Area X may invite more people, such as other-id.其中X表示第几次查询的编号;若这样的人有多个，输出编号最小一个即可；</p>
<p>3)如果查询的休息地中，任意两个人都相互认识，并且无法再加入其他人。则输出Area X is OK.，其中X表示第几次查询的编号。</p>
</br>
<p>解题思路：不需要存图，但需要保存好友关系，方便查询。</p>
<hr>
<pre><code class="language-c++">#include&lt;bits/stdc++.h&gt;
#include&lt;map&gt;
using namespace std;
#define ll long long
int n, m;
vector&lt;int&gt; v;
unordered_map&lt;int,unordered_map&lt;int,int&gt; &gt; p;
void solve(int index)
{
	bool vis[400];
	memset(vis,false,sizeof(vis));
	int l = v.size();
	bool f1 = true;
	for(int i=0; i&lt;l&amp;&amp;f1; i++){
		vis[i] = true;
		for(int j=i+1; j&lt;l; j++){
			if(p[v[i]][v[j]]==0){
				f1 = false;
				break;
			}
		}
	}
	if(f1==false){
		printf(&quot;Area %d needs help.\n&quot;, index);
		return ;
	}
	int ans;
	for(int i=1; i&lt;=n&amp;&amp;f1; i++){
		if(vis[i]==false){
			f1 = false;
			for(int j=0; j&lt;l; j++){
				if(p[i][v[j]]==0){
					f1 = true;
					break;
				}
			}
			if(f1==false){
				ans = i;
			}
		}
	}
	if(f1==false){
		printf(&quot;Area %d may invite more people, such as %d.\n&quot;, index, ans);
	}
	else{
		printf(&quot;Area %d is OK.\n&quot;, index);
	}
}
int main()
{
	int a, b;
	scanf(&quot;%d %d&quot;, &amp;n, &amp;m);
	for(int i=0; i&lt;m; i++){
		scanf(&quot;%d %d&quot;, &amp;a, &amp;b);
		p[a][b] = p[b][a] = 1;
	}
	int k;
	scanf(&quot;%d&quot;, &amp;k);
	for(int i=0; i&lt;k; i++){
		scanf(&quot;%d&quot;, &amp;m);
		for(int j=0; j&lt;m; j++){
			scanf(&quot;%d&quot;, &amp;a);
			v.push_back(a);
		}
		solve(i+1);
		v.clear();
	}
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PAT（甲级）2019年冬仿真卷 7-2 Block Reversing (25分)题解]]></title>
        <id>https://ygytl.github.io/post/7-2-block-reversing-25-fen-ti-jie/</id>
        <link href="https://ygytl.github.io/post/7-2-block-reversing-25-fen-ti-jie/">
        </link>
        <updated>2020-07-20T13:45:56.000Z</updated>
        <content type="html"><![CDATA[<p>7-2 Block Reversing (25分)</p>
<p>Given a singly linked list <em>L</em>. Let us consider every <em>K</em> nodes as a <strong>block</strong> (if there are less than <em>K</em> nodes at the end of the list, the rest of the nodes are still considered as a block). Your job is to reverse all the blocks in <em>L</em>. For example, given <em>L</em> as 1→2→3→4→5→6→7→8 and <em>K</em> as 3, your output must be 7→8→4→5→6→1→2→3.</p>
<h3 id="input-specification">Input Specification:</h3>
<p>Each input file contains one test case. For each case, the first line contains the address of the first node, a positive <em>N</em> (≤105) which is the total number of nodes, and a positive <em>K</em> (≤<em>N</em>) which is the size of a block. The address of a node is a 5-digit nonnegative integer, and NULL is represented by −1.</p>
<p>Then <em>N</em> lines follow, each describes a node in the format:</p>
<pre><code>Address Data Next
</code></pre>
<p>where <code>Address</code> is the position of the node, <code>Data</code> is an integer, and <code>Next</code> is the position of the next node.</p>
<h3 id="output-specification">Output Specification:</h3>
<p>For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.</p>
<h3 id="sample-input">Sample Input:</h3>
<pre><code class="language-in">00100 8 3
71120 7 88666
00000 4 99999
00100 1 12309
68237 6 71120
33218 3 00000
99999 5 68237
88666 8 -1
12309 2 33218
</code></pre>
<h3 id="sample-output">Sample Output:</h3>
<pre><code class="language-out">71120 7 88666
88666 8 00000
00000 4 99999
99999 5 68237
68237 6 00100
00100 1 12309
12309 2 33218
33218 3 -1
</code></pre>
<hr>
<p>题目描述：反转链表</p>
<p>输入：第一行head、n、k分别表示链表的头结点起始地址，n个结点，每k个结点为一组反转。</p>
<p>输出：输出反转后的链表。</p>
</br>
<p>常规题，先将链表串联起来，算出有多少组，从索引最大的一组开始链接，就能将链表反转了。</p>
<hr>
<pre><code class="language-c++">#include&lt;bits/stdc++.h&gt;
using namespace std;
const int maxn = 1e5+5;
struct node{
	int head, num, next;
}l1[maxn];
vector&lt;node&gt; v1, v2;
int main()
{
	int head, n, k;
	node t;
	scanf(&quot;%d %d %d&quot;, &amp;head, &amp;n, &amp;k);
	for(int i=0; i&lt;n; i++){
		scanf(&quot;%d %d %d&quot;, &amp;t.head, &amp;t.num, &amp;t.next);
		l1[t.head] = t;
	}
	while(head!=-1){
		t = l1[head];
		v1.push_back(t);
		head = t.next;
	}
	int cnt = v1.size()/k;
	while(cnt&gt;=0){
		for(int j=0; j&lt;k&amp;&amp;cnt*k+j&lt;v1.size(); j++){
			v2.push_back(v1[cnt*k+j]);
		}
		cnt--;
	}
	for(int i=0; i&lt;v2.size()-1; i++){
		t = v2[i];
		printf(&quot;%05d %d %05d\n&quot;, t.head, t.num, v2[i+1].head);
	}
	printf(&quot;%05d %d -1\n&quot;, v2[v2.size()-1].head, v2[v2.size()-1].num);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PAT（甲级）2019年冬仿真卷 7-1 Good in C (20分)题解]]></title>
        <id>https://ygytl.github.io/post/7-1-good-in-c-20-fen-ti-jie/</id>
        <link href="https://ygytl.github.io/post/7-1-good-in-c-20-fen-ti-jie/">
        </link>
        <updated>2020-07-20T13:39:04.000Z</updated>
        <content type="html"><![CDATA[<p>7-1 Good in C (20分)</p>
<p>When your interviewer asks you to write &quot;Hello World&quot; using C, can you do as the following figure shows?</p>
<figure data-type="image" tabindex="1"><img src="https://images.ptausercontent.com/ba3b8678-061d-4fc6-a87e-ce08e1434410.jpg" alt="HWC.jpg" loading="lazy"></figure>
<h3 id="input-specification">Input Specification:</h3>
<p>Each input file contains one test case. For each case, the first part gives the 26 capital English letters A-Z, each in a 7×5 matrix of <code>C</code>'s and <code>.</code>'s. Then a sentence is given in a line, ended by a return. The sentence is formed by several words (no more than 10 continuous capital English letters each), and the words are separated by any characters other than capital English letters.</p>
<p>It is guaranteed that there is at least one word given.</p>
<h3 id="output-specification">Output Specification:</h3>
<p>For each word, print the matrix form of each of its letters in a line, and the letters must be separated by exactly one column of space. There must be no extra space at the beginning or the end of the word.</p>
<p>Between two adjacent words, there must be a single empty line to separate them. There must be no extra line at the beginning or the end of the output.</p>
<h3 id="sample-input">Sample Input:</h3>
<pre><code class="language-in">..C..
.C.C.
C...C
CCCCC
C...C
C...C
C...C
CCCC.
C...C
C...C
CCCC.
C...C
C...C
CCCC.
.CCC.
C...C
C....
C....
C....
C...C
.CCC.
CCCC.
C...C
C...C
C...C
C...C
C...C
CCCC.
CCCCC
C....
C....
CCCC.
C....
C....
CCCCC
CCCCC
C....
C....
CCCC.
C....
C....
C....
CCCC.
C...C
C....
C.CCC
C...C
C...C
CCCC.
C...C
C...C
C...C
CCCCC
C...C
C...C
C...C
CCCCC
..C..
..C..
..C..
..C..
..C..
CCCCC
CCCCC
....C
....C
....C
....C
C...C
.CCC.
C...C
C..C.
C.C..
CC...
C.C..
C..C.
C...C
C....
C....
C....
C....
C....
C....
CCCCC
C...C
C...C
CC.CC
C.C.C
C...C
C...C
C...C
C...C
C...C
CC..C
C.C.C
C..CC
C...C
C...C
.CCC.
C...C
C...C
C...C
C...C
C...C
.CCC.
CCCC.
C...C
C...C
CCCC.
C....
C....
C....
.CCC.
C...C
C...C
C...C
C.C.C
C..CC
.CCC.
CCCC.
C...C
CCCC.
CC...
C.C..
C..C.
C...C
.CCC.
C...C
C....
.CCC.
....C
C...C
.CCC.
CCCCC
..C..
..C..
..C..
..C..
..C..
..C..
C...C
C...C
C...C
C...C
C...C
C...C
.CCC.
C...C
C...C
C...C
C...C
C...C
.C.C.
..C..
C...C
C...C
C...C
C.C.C
CC.CC
C...C
C...C
C...C
C...C
.C.C.
..C..
.C.C.
C...C
C...C
C...C
C...C
.C.C.
..C..
..C..
..C..
..C..
CCCCC
....C
...C.
..C..
.C...
C....
CCCCC
HELLO~WORLD!
</code></pre>
<h3 id="sample-output">Sample Output:</h3>
<pre><code class="language-out">C...C CCCCC C.... C.... .CCC.
C...C C.... C.... C.... C...C
C...C C.... C.... C.... C...C
CCCCC CCCC. C.... C.... C...C
C...C C.... C.... C.... C...C
C...C C.... C.... C.... C...C
C...C CCCCC CCCCC CCCCC .CCC.

C...C .CCC. CCCC. C.... CCCC.
C...C C...C C...C C.... C...C
C...C C...C CCCC. C.... C...C
C.C.C C...C CC... C.... C...C
CC.CC C...C C.C.. C.... C...C
C...C C...C C..C. C.... C...C
C...C .CCC. C...C CCCCC CCCC.
</code></pre>
<hr>
<p>题目描述：</p>
<p>输入：前面26*7行给出A-Z的字母输出格式，每7行为一个字母；最后一行是需要按格式输出的字符串。单词由不是A~Z的字符分隔。</p>
<p>输出：每个单词占7行，单词的字母中间用一个空格隔开。输出严格按照规定，最后一行不需输出空行。</p>
</br>
<p>解题思路：先将每个字母的输出格式存入字符数组，以便查找。在使用getline()接收需要分割的字符串----这点严重警告，否则测试点1、2、3会显示错误，如果不用getline接收，当遇到空格字符串就不能完整接收。需要算好在哪里空行！不能多不能少，太严格了。。</p>
<hr>
<pre><code class="language-c++">#include&lt;bits/stdc++.h&gt;
using namespace std;
string str[200];
string s;
int main()
{
	for(int i=0; i&lt;182; i++) cin &gt;&gt; str[i];
	getchar();
	getline(cin,s);
	string t = &quot;&quot;;
	bool flag = false;
	for(int i=0; i&lt;s.length(); i++){
		if(s[i]&gt;'Z'||s[i]&lt;'A'){
			if(t.length()&gt;0){
				if(flag==true) cout &lt;&lt; endl;
				for(int o2=0; o2&lt;7; o2++){
					for(int o1=0; o1&lt;t.length(); o1++){
						int k = t[o1]-'A';
						if(o1) cout &lt;&lt; &quot; &quot;;
						cout &lt;&lt; str[k*7+o2];
					}
					cout &lt;&lt; endl;
				}
				t = &quot;&quot;;
				flag = true;
			}
		}
		else{
			t += s[i];
		}
	}
	if(t.length()!=0){
		if(flag==true) cout &lt;&lt; endl;
		for(int o2=0; o2&lt;7; o2++){
			for(int o1=0; o1&lt;t.length(); o1++){
				int k = t[o1]-'A';
				if(o1) cout &lt;&lt; &quot; &quot;;
				cout &lt;&lt; str[k*7+o2];
			}
			cout &lt;&lt; endl;
		}
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1135 Is It A Red-Black Tree (30分)题解]]></title>
        <id>https://ygytl.github.io/post/1135-is-it-a-red-black-tree-30-fen-ti-jie/</id>
        <link href="https://ygytl.github.io/post/1135-is-it-a-red-black-tree-30-fen-ti-jie/">
        </link>
        <updated>2020-07-11T08:28:20.000Z</updated>
        <content type="html"><![CDATA[<p>1135 Is It A Red-Black Tree (30分)</p>
<p>There is a kind of balanced binary search tree named <strong>red-black tree</strong> in the data structure. It has the following 5 properties:</p>
<ul>
<li>(1) Every node is either red or black.</li>
<li>(2) The root is black.</li>
<li>(3) Every leaf (NULL) is black.</li>
<li>(4) If a node is red, then both its children are black.</li>
<li>(5) For each node, all simple paths from the node to descendant leaves contain the same number of black nodes.</li>
</ul>
<p>For example, the tree in Figure 1 is a red-black tree, while the ones in Figure 2 and 3 are not.</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="https://images.ptausercontent.com/eff80bd4-c833-4818-9786-81680d1b304a.jpg" alt="rbf1.jpg" loading="lazy"></th>
<th style="text-align:center"><img src="https://images.ptausercontent.com/b11184df-eaab-451c-b7d4-7fc1dc82b028.jpg" alt="rbf2.jpg" loading="lazy"></th>
<th style="text-align:center"><img src="https://images.ptausercontent.com/625c532b-22fc-47b9-80ea-0537cf00d922.jpg" alt="rbf3.jpg" loading="lazy"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Figure 1</td>
<td style="text-align:center">Figure 2</td>
<td style="text-align:center">Figure 3</td>
</tr>
</tbody>
</table>
<p>For each given binary search tree, you are supposed to tell if it is a legal red-black tree.</p>
<h3 id="input-specification">Input Specification:</h3>
<p>Each input file contains several test cases. The first line gives a positive integer K (≤30) which is the total number of cases. For each case, the first line gives a positive integer N (≤30), the total number of nodes in the binary tree. The second line gives the preorder traversal sequence of the tree. While all the keys in a tree are positive integers, we use negative signs to represent red nodes. All the numbers in a line are separated by a space. The sample input cases correspond to the trees shown in Figure 1, 2 and 3.</p>
<h3 id="output-specification">Output Specification:</h3>
<p>For each test case, print in a line &quot;Yes&quot; if the given tree is a red-black tree, or &quot;No&quot; if not.</p>
<h3 id="sample-input">Sample Input:</h3>
<pre><code class="language-in">3
9
7 -2 1 5 -4 -11 8 14 -15
9
11 -2 1 -7 5 -4 8 14 -15
8
10 -7 5 -6 8 15 -11 17
</code></pre>
<h3 id="sample-output">Sample Output:</h3>
<pre><code class="language-out">Yes
No
No
</code></pre>
<hr>
<p>题目描述：红黑树是一个二叉搜索树，根节点的值大于左子结点，根节点的值小于或等于右子节点的值。红黑树的特点如下：</p>
<p>1)每一个结点由红色或黑色组成</p>
<p>2)根节点为黑色</p>
<p>3)每个叶子节点(NULL)都为黑色</p>
<p>4)如果节点为红色，那他的两个子结点必须为黑色</p>
<p>5)根节点到每个子结点的路径中，黑色子结点的个数都要相同</p>
<p>输入：第一行k为测试用例数，往下有k组；每组第一行n为结点总数，每组第二行有n个数，表示需要插入的结点的值，正整数为黑色，负整数为红色。</p>
<p>输出：输出是否能构成红黑树，是为Yes，否为No。</p>
</br>
<p>解题思路：先构建一个红黑树，将题目给定的值依序插入就能将二叉搜索树构建出来，我是通过递归的方法构建的。树构建完成后，用BFS遍历每个结点，检查是否符合红黑树的特性。</p>
<p>注意：题目给出的结点值都不是叶子结点，叶子节点没有值为NULL，这是个坑，没注意到测试点2、3就会错。</p>
<hr>
<pre><code class="language-c++">#include&lt;bits/stdc++.h&gt;
using namespace std;
int n, m, cnt;
bool flag;
struct node{
	int num;
	node *l, *r;
	node(){
		l = r = NULL;
	}
};
node *Insert(node *root, int k){
	if(root==NULL){
		root = new node();
		root-&gt;num = k;
		root-&gt;l = root-&gt;r = NULL;
	}
	else if(abs(k)&gt;=abs(root-&gt;num)){
		root-&gt;r = Insert(root-&gt;r,k);
	}
	else root-&gt;l = Insert(root-&gt;l,k);
	return root;
}
void bfs(node *root){
	pair&lt;node*,int&gt; t, tt;
	node *troot;
	queue&lt;pair&lt;node*,int&gt;&gt; q;
	t.first = root; t.second = 0;
	q.push(t);
	while(!q.empty()&amp;&amp;flag){
		t = q.front(); q.pop();
		troot = t.first;
		if(troot==NULL){
			t.second++;
			if(cnt==-1) cnt = t.second;
			if(cnt!=t.second) flag = false;
			continue;
		}
		if(troot-&gt;num&gt;0) t.second++;
		
		if(troot-&gt;l!=NULL&amp;&amp;troot-&gt;num&lt;0&amp;&amp;troot-&gt;l-&gt;num&lt;0) flag = false;
		tt.first = troot-&gt;l; tt.second = t.second;
		q.push(tt);
		
		if(troot-&gt;r!=NULL&amp;&amp;troot-&gt;num&lt;0&amp;&amp;troot-&gt;r-&gt;num&lt;0) flag = false;
		tt.first = troot-&gt;r; tt.second = t.second;
		q.push(tt);
	}
}
int main()
{
	int k;
	scanf(&quot;%d&quot;, &amp;n);
	for(int i=0; i&lt;n; i++){
		scanf(&quot;%d&quot;, &amp;m);
		node *tree = NULL;
		for(int j=0; j&lt;m; j++){
			scanf(&quot;%d&quot;, &amp;k);
			tree = Insert(tree,k);
		}
		flag = true;
		cnt = -1;
		if(tree-&gt;num&lt;0) flag = false;
		else bfs(tree);
		if(flag) printf(&quot;Yes\n&quot;);
		else printf(&quot;No\n&quot;);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1130 Infix Expression (25分)题解]]></title>
        <id>https://ygytl.github.io/post/1130-infix-expression-25-fen-ti-jie/</id>
        <link href="https://ygytl.github.io/post/1130-infix-expression-25-fen-ti-jie/">
        </link>
        <updated>2020-07-09T14:06:17.000Z</updated>
        <content type="html"><![CDATA[<p>1130 Infix Expression (25分)</p>
<p>Given a syntax tree (binary), you are supposed to output the corresponding infix expression, with parentheses reflecting the precedences of the operators.</p>
<h3 id="input-specification">Input Specification:</h3>
<p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤ 20) which is the total number of nodes in the syntax tree. Then N lines follow, each gives the information of a node (the <em>i</em>-th line corresponds to the <em>i</em>-th node) in the format:</p>
<pre><code>data left_child right_child
</code></pre>
<p>where <code>data</code> is a string of no more than 10 characters, <code>left_child</code> and <code>right_child</code> are the indices of this node's left and right children, respectively. The nodes are indexed from 1 to N. The NULL link is represented by −1. The figures 1 and 2 correspond to the samples 1 and 2, respectively.</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="https://images.ptausercontent.com/4d1c4a98-33cc-45ff-820f-c548845681ba.JPG" alt="infix1.JPG" loading="lazy"></th>
<th style="text-align:center"><img src="https://images.ptausercontent.com/b5a3c36e-91ad-494a-8853-b46e1e8b60cc.JPG" alt="infix2.JPG" loading="lazy"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Figure 1</td>
<td style="text-align:center">Figure 2</td>
</tr>
</tbody>
</table>
<h3 id="output-specification">Output Specification:</h3>
<p>For each case, print in a line the infix expression, with parentheses reflecting the precedences of the operators. Note that there must be no extra parentheses for the final expression, as is shown by the samples. There must be no space between any symbols.</p>
<h3 id="sample-input-1">Sample Input 1:</h3>
<pre><code class="language-in">8
* 8 7
a -1 -1
* 4 1
+ 2 5
b -1 -1
d -1 -1
- -1 6
c -1 -1
</code></pre>
<h3 id="sample-output-1">Sample Output 1:</h3>
<pre><code class="language-out">(a+b)*(c*(-d))
</code></pre>
<h3 id="sample-input-2">Sample Input 2:</h3>
<pre><code class="language-in">8
2.35 -1 -1
* 6 1
- -1 4
% 7 8
+ 2 3
a -1 -1
str -1 -1
871 -1 -1
</code></pre>
<h3 id="sample-output-2">Sample Output 2:</h3>
<pre><code class="language-out">(a*2.35)+(-(str%871))
</code></pre>
<hr>
<p>题目描述：二叉树，以算式格式输出。</p>
<p>输入：第一行n为节点数，接下来n行，表示第i个结点的值、左右节点编号。</p>
<p>输出：算式格式输出。</p>
</br>
<p>解题方法：题目没有给出根节点的编号，所以需要先求出根节点编号；得到树的中序遍历，之后得到算式还难吗？</p>
<hr>
<p>方法一：</p>
<pre><code class="language-c++">#include&lt;bits/stdc++.h&gt;
using namespace std;
int n;
const int maxn = 100;
string ans=&quot;&quot;;
struct node{
	string ch;
	int l, r;
};
vector&lt;node&gt; tree(maxn);
bool vis[maxn];
void bfs(int index){
	queue&lt;int&gt; q;
	q.push(index);
	while(!q.empty()){
		int u = q.front(); q.pop();
		vis[u] = true;
		node t = tree[u];
		if(t.l!=-1) q.push(t.l);
		if(t.r!=-1) q.push(t.r);
	}
}
void get_inorder(int index, int g){
	if(index==-1) return ;
	node t = tree[index];
	if(tree[index].r!=-1&amp;&amp;g&gt;1) ans += &quot;(&quot;;
	get_inorder(t.l,g+1);
	ans += t.ch;
	get_inorder(t.r,g+1);
	if(tree[index].r!=-1&amp;&amp;g&gt;1) ans += &quot;)&quot;;
}
int main()
{
	scanf(&quot;%d&quot;, &amp;n);
	int root;
	for(int i=1; i&lt;=n; i++){
		getchar();
		node t;
		cin &gt;&gt; t.ch &gt;&gt; t.l &gt;&gt; t.r;
		tree[i] = t;
	}
	for(int i=1; i&lt;=n; i++){
		memset(vis,false,sizeof(vis));
		bfs(i);
		bool flag = true;
		for(int j=1; j&lt;=n; j++){
			if(vis[j]==false){
				flag = false;
				break;
			}
		}
		if(flag){
			root = i;
			break;
		}
	}
	get_inorder(root,1);
	cout &lt;&lt; ans &lt;&lt; endl;
	return 0;
}
</code></pre>
<p>方法二：</p>
<pre><code class="language-c++">#include&lt;bits/stdc++.h&gt;
using namespace std;
int n;
const int maxn = 100;
string ans=&quot;&quot;;
struct node{
	string ch;
	int l, r;
};
vector&lt;node&gt; tree(maxn);
bool vis[maxn];
void get_inorder(int index, int g){
	if(index==-1) return ;
	node t = tree[index];
	if(tree[index].r!=-1&amp;&amp;g&gt;1) ans += &quot;(&quot;;
	get_inorder(t.l,g+1);
	ans += t.ch;
	get_inorder(t.r,g+1);
	if(tree[index].r!=-1&amp;&amp;g&gt;1) ans += &quot;)&quot;;
}
int main()
{
	scanf(&quot;%d&quot;, &amp;n);
	int root;
	memset(vis,false,sizeof(vis));
	for(int i=1; i&lt;=n; i++){
		getchar();
		node t;
		cin &gt;&gt; t.ch &gt;&gt; t.l &gt;&gt; t.r;
		tree[i] = t;
		if(t.l!=-1) vis[t.l] = true;
		if(t.r!=-1) vis[t.r] = true;
	}
	for(int i=1; i&lt;=n; i++){
		if(vis[i]==false){
			root = i;
			break;
		}
	}
	get_inorder(root,1);
	cout &lt;&lt; ans &lt;&lt; endl;
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1129 Recommendation System (25分)题解]]></title>
        <id>https://ygytl.github.io/post/1129-recommendation-system-25-fen-ti-jie/</id>
        <link href="https://ygytl.github.io/post/1129-recommendation-system-25-fen-ti-jie/">
        </link>
        <updated>2020-07-09T12:31:41.000Z</updated>
        <content type="html"><![CDATA[<p>1129 Recommendation System (25分)</p>
<p>Recommendation system predicts the preference that a user would give to an item. Now you are asked to program a very simple recommendation system that rates the user's preference by the number of times that an item has been accessed by this user.</p>
<h3 id="input-specification">Input Specification:</h3>
<p>Each input file contains one test case. For each test case, the first line contains two positive integers: N (≤ 50,000), the total number of queries, and K (≤ 10), the maximum number of recommendations the system must show to the user. Then given in the second line are the indices of items that the user is accessing -- for the sake of simplicity, all the items are indexed from 1 to N. All the numbers in a line are separated by a space.</p>
<h3 id="output-specification">Output Specification:</h3>
<p>For each case, process the queries one by one. Output the recommendations for each query in a line in the format:</p>
<pre><code>query: rec[1] rec[2] ... rec[K]
</code></pre>
<p>where <code>query</code> is the item that the user is accessing, and <code>rec[i]</code> (<code>i</code>=1, ... K) is the <code>i</code>-th item that the system recommends to the user. The first K items that have been accessed most frequently are supposed to be recommended in non-increasing order of their frequencies. If there is a tie, the items will be ordered by their indices in increasing order.</p>
<p>Note: there is no output for the first item since it is impossible to give any recommendation at the time. It is guaranteed to have the output for at least one query.</p>
<h3 id="sample-input">Sample Input:</h3>
<pre><code class="language-in">12 3
3 5 7 5 5 3 2 1 8 3 8 12
</code></pre>
<h3 id="sample-output">Sample Output:</h3>
<pre><code class="language-out">5: 3
7: 3 5
5: 3 5 7
5: 5 3 7
3: 5 3 7
2: 5 3 7
1: 5 3 2
8: 5 3 1
3: 5 3 1
8: 3 5 1
12: 3 5 8
</code></pre>
<hr>
<p>题目描述：更新推荐系统。</p>
<p>输入描述：第一行n为推荐数，m为最多推荐个数。第二行有m个值，为每次推荐的编号。</p>
<p>输出描述：输出此次推荐编号之前的排序，例如样例，第一个推荐编号为3，第二个推荐编号为5，应该从5开始输出它前面最优的推荐。</p>
<p>系统推荐排序规则：推荐次数多的排在前面，若推荐次数相同，则按编号从小到大排序。</p>
</br>
<p>测试点3、4容易超时，要找准遍历目标。</p>
<hr>
<pre><code class="language-c++">#include&lt;bits/stdc++.h&gt;
using namespace std;
int n, m, k;
map&lt;int,int&gt; p, pid;
struct node{
	int num, cnt = 0;
};
vector&lt;node&gt; G;
bool cmp(node a, node b){
	if(a.cnt!=b.cnt) return a.cnt &gt; b.cnt;//降序 
	else return a.num &lt; b.num;//升序 
}
int main()
{
	map&lt;int,int&gt;::iterator it;
	scanf(&quot;%d %d&quot;, &amp;n, &amp;m);
	for(int i=0; i&lt;n; i++){
		scanf(&quot;%d&quot;, &amp;k);
		pid[k] = i;
		node t;
		if(i){
			printf(&quot;%d:&quot;, k);
			for(int j=0; j&lt;m&amp;&amp;j&lt;G.size(); j++){
				printf(&quot; %d&quot;, G[j].num);
			}
			printf(&quot;\n&quot;);
		}
		p[k]++;
		t.num = k; t.cnt = p[k];
		bool flag = true;
		for(int j=0; j&lt;G.size(); j++){
			if(G[j].num==k){
				G[j].cnt = t.cnt;
				flag = false;
				break;
			}
		}
		if(flag) G.push_back(t);
		sort(G.begin(),G.end(),cmp);
		if(G.size()&gt;m) G.pop_back();
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1127 ZigZagging on a Tree (30分)题解]]></title>
        <id>https://ygytl.github.io/post/1127-zigzagging-on-a-tree-30-fen-ti-jie/</id>
        <link href="https://ygytl.github.io/post/1127-zigzagging-on-a-tree-30-fen-ti-jie/">
        </link>
        <updated>2020-07-08T14:14:46.000Z</updated>
        <content type="html"><![CDATA[<p>1127 ZigZagging on a Tree (30分)</p>
<p>Suppose that all the keys in a binary tree are distinct positive integers. A unique binary tree can be determined by a given pair of postorder and inorder traversal sequences. And it is a simple standard routine to print the numbers in level-order. However, if you think the problem is too simple, then you are too naive. This time you are supposed to print the numbers in &quot;zigzagging order&quot; -- that is, starting from the root, print the numbers level-by-level, alternating between left to right and right to left. For example, for the following tree you must output: 1 11 5 8 17 12 20 15.</p>
<figure data-type="image" tabindex="1"><img src="https://images.ptausercontent.com/337cbfb0-a7b2-4500-9664-318e9ffc870e.jpg" alt="zigzag.jpg" loading="lazy"></figure>
<h3 id="input-specification">Input Specification:</h3>
<p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤30), the total number of nodes in the binary tree. The second line gives the inorder sequence and the third line gives the postorder sequence. All the numbers in a line are separated by a space.</p>
<h3 id="output-specification">Output Specification:</h3>
<p>For each test case, print the zigzagging sequence of the tree in a line. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p>
<h3 id="sample-input">Sample Input:</h3>
<pre><code class="language-in">8
12 11 20 17 1 15 8 5
12 20 17 11 15 8 5 1
</code></pre>
<h3 id="sample-output">Sample Output:</h3>
<pre><code class="language-out">1 11 5 8 17 12 20 15
</code></pre>
<hr>
<p>题目描述：已知中序遍历和后序遍历可以得到唯一的二叉树；已知中序遍历和先序遍历，可以得到唯一的二叉树。现在题目给出中序和后序遍历，需要求出层序遍历的结果。但是这个层序遍历需要按照Z字行输出。</p>
</br>
<p>解题思路：不需要建树，递归就能得到层序遍历的结果。1086题解解释了已知先序遍历和中序遍历，求后序遍历的结果，思路与这题差不多，可以参考。</p>
<hr>
<pre><code class="language-c++">#include&lt;bits/stdc++.h&gt;
using namespace std;
int n, cnt;
const int maxn = 1e4+5;
vector&lt;int&gt; inorder, post;
vector&lt;int&gt; level[maxn];
void get_level(int root, int inl, int inr, int index){
	if(inl&gt;inr) return ;
	int i = inl;
	cnt = index;
	level[index].push_back(post[root]);
	while(i&lt;=inr&amp;&amp;inorder[i]!=post[root]) i++;
	get_level(root-(inr-i+1),inl,i-1,index+1);
	get_level(root-1,i+1,inr,index+1);
}
int main()
{
	scanf(&quot;%d&quot;, &amp;n);
	inorder.resize(n);
	post.resize(n);
	for(int i=0; i&lt;n; i++) scanf(&quot;%d&quot;, &amp;inorder[i]);
	for(int i=0; i&lt;n; i++) scanf(&quot;%d&quot;, &amp;post[i]);
	get_level(n-1,0,n-1,1);
	for(int i=1; i&lt;=cnt; i++){
		if(i%2==0){
			for(int j=0; j&lt;level[i].size(); j++){
				if(i!=1) printf(&quot; &quot;);
				printf(&quot;%d&quot;, level[i][j]);
			}
		}
		else{
			for(int j=level[i].size()-1; j&gt;=0; j--){
				if(i!=1) printf(&quot; &quot;);
				printf(&quot;%d&quot;, level[i][j]);
			}
		}
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1123 Is It a Complete AVL Tree (30分)题解]]></title>
        <id>https://ygytl.github.io/post/1123-is-it-a-complete-avl-tree-30-fen-ti-jie/</id>
        <link href="https://ygytl.github.io/post/1123-is-it-a-complete-avl-tree-30-fen-ti-jie/">
        </link>
        <updated>2020-07-07T14:24:07.000Z</updated>
        <content type="html"><![CDATA[<p>1123 Is It a Complete AVL Tree (30分)</p>
<p>An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Figures 1-4 illustrate the rotation rules.</p>
<figure data-type="image" tabindex="1"><img src="https://ygytl.github.io//post-images/1594132084359.JPG" alt="" loading="lazy"></figure>
<p>Now given a sequence of insertions, you are supposed to output the level-order traversal sequence of the resulting AVL tree, and to tell if it is a complete binary tree.</p>
<h3 id="input-specification">Input Specification:</h3>
<p>Each input file contains one test case. For each case, the first line contains a positive integer N (≤ 20). Then N distinct integer keys are given in the next line. All the numbers in a line are separated by a space.</p>
<h3 id="output-specification">Output Specification:</h3>
<p>For each test case, insert the keys one by one into an initially empty AVL tree. Then first print in a line the level-order traversal sequence of the resulting AVL tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line. Then in the next line, print <code>YES</code> if the tree is complete, or <code>NO</code> if not.</p>
<h3 id="sample-input-1">Sample Input 1:</h3>
<pre><code class="language-in">5
88 70 61 63 65
</code></pre>
<h3 id="sample-output-1">Sample Output 1:</h3>
<pre><code class="language-out">70 63 88 61 65
YES
</code></pre>
<h3 id="sample-input-2">Sample Input 2:</h3>
<pre><code class="language-in">8
88 70 61 96 120 90 65 68
</code></pre>
<h3 id="sample-output-2">Sample Output 2:</h3>
<pre><code class="language-out">88 65 96 61 70 90 120 68
NO
</code></pre>
<hr>
<p>题目描述：完全平衡二叉树。具体参考1066的题解</p>
<p>该题需要建树，判断是否能形成完全平衡二叉树，是输出YES，否输出NO。还要输出树的层序遍历。</p>
</br>
<p>解题思路：建树，完成左转、右转、左右转、右左转的操作、求结点的高度等，最后利用BFS得到层序遍历。</p>
<hr>
<pre><code class="language-c++">#include&lt;bits/stdc++.h&gt;
using namespace std;
int n, k;
vector&lt;int&gt; level;
struct node{
	int num;
	node *l, *r;
	node(){
		l = r = NULL;
	}
};
node *LeftRoute(node *root){
	node *t;
	t = root-&gt;r;
	root-&gt;r = t-&gt;l;
	t-&gt;l = root;
	return t;
}
node *RightRoute(node *root){
	node *t;
	t = root-&gt;l;
	root-&gt;l = t-&gt;r;
	t-&gt;r = root;
	return t;
}
node *LeftRightRoute(node *root){
	root-&gt;l = LeftRoute(root-&gt;l);
	root = RightRoute(root);
	return root;
}
node *RightLeftRoute(node *root){
	root-&gt;r = RightRoute(root-&gt;r);
	root = LeftRoute(root);
	return root;
}
int height(node *root){
	if(root==NULL) return 1;
	return max(height(root-&gt;l),height(root-&gt;r))+1;
}
node *Insert(node *root, int k){
	if(root==NULL){
		root = new node();
		root-&gt;num = k;
		root-&gt;l = root-&gt;r = NULL;
	}
	else if(k&gt;=root-&gt;num){
		root-&gt;r = Insert(root-&gt;r,k);
		if(abs(height(root-&gt;r)-height(root-&gt;l))&gt;=2){
			root = k&gt;=root-&gt;r-&gt;num ? LeftRoute(root) : RightLeftRoute(root);
		}
	}
	else{
		root-&gt;l = Insert(root-&gt;l,k);
		if(abs(height(root-&gt;l)-height(root-&gt;r))&gt;=2){
			root = k&lt;=root-&gt;l-&gt;num ? RightRoute(root) : LeftRightRoute(root);
		}
	}
	return root;
}
void bfs(node *root){
	pair&lt;node *, int&gt; t, tt;
	queue&lt;pair&lt;node *, int&gt; &gt; q;
	t.first = root; t.second = 1;
	q.push(t);
	bool flag = true;
	int cnt = 1;
	while(!q.empty()){
		t = q.front(); q.pop();
		if(cnt!=t.second) flag = false;
		cnt++;
		level.push_back(t.first-&gt;num);
		if(t.first-&gt;l!=NULL){
			tt.first = t.first-&gt;l;
			tt.second = t.second*2;
			q.push(tt);
		}
		if(t.first-&gt;r!=NULL){
			tt.first = t.first-&gt;r;
			tt.second = t.second*2+1;
			q.push(tt);
		} 
	}
	for(int i=0; i&lt;level.size(); i++){
		if(i) printf(&quot; &quot;);
		printf(&quot;%d&quot;, level[i]);
	}
	printf(&quot;\n&quot;);
	if(flag) printf(&quot;YES\n&quot;);
	else printf(&quot;NO\n&quot;);
}
int main()
{
	node *tree = NULL;
	scanf(&quot;%d&quot;, &amp;n);
	for(int i=0; i&lt;n; i++){
		scanf(&quot;%d&quot;, &amp;k);
		tree = Insert(tree,k);
	}
	bfs(tree);
	return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>